#ifndef NUMBER_STRING_H_INCLUDED#define NUMBER_STRING_H_INCLUDED#include "String.h"#include <map>const int max_number_len = 2500;const char dot = '.';const char zero = '0';const char one = '1';const char five = '5';const char four = '4';const char nine = '9';const char minus_sign = '-';const char plus_sign = '+';const char space_sign = ' ';const char pound_sign = '#';const char percent_sign = '%';const char int_sign = 'd';const char float_sign = 'f';const int default_precision = 6;class number_string : public String {private :	int dot_plc;public :	number_string();	number_string(char * number);	number_string(const String & number);	virtual ~number_string();		int ret_dot_plc() const;	number_string turn_to_int() const;	number_string round_in_n(int n) const;	number_string normalize(char * & format) const;	number_string normalize_sign() const;	number_string normalize_width(int sign, int width) const;		virtual number_string & operator = (const number_string & temp);};static int get_sign(char * & format, int & next);static int get_width(char * & format, int & next);static int get_precision(char * & format, int & sign, int opt, int & next);static std::map<char,int> mp;char * initialize(char * number);#endif